// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(PersonDbContext))]
    [Migration("20201106115946_AddDataToPersonsAndDictionaryTable")]
    partial class AddDataToPersonsAndDictionaryTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Entities.Dictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("HasGender")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPhoneType")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPosition")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dictionaries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HasGender = false,
                            HasPhoneType = false,
                            HasPosition = true,
                            Title = "Manager"
                        },
                        new
                        {
                            Id = 2,
                            HasGender = false,
                            HasPhoneType = false,
                            HasPosition = true,
                            Title = "CEO"
                        },
                        new
                        {
                            Id = 3,
                            HasGender = false,
                            HasPhoneType = false,
                            HasPosition = true,
                            Title = "CTO"
                        },
                        new
                        {
                            Id = 4,
                            HasGender = false,
                            HasPhoneType = false,
                            HasPosition = true,
                            Title = "Web Developer"
                        },
                        new
                        {
                            Id = 5,
                            HasGender = true,
                            HasPhoneType = false,
                            HasPosition = false,
                            Title = "Male"
                        },
                        new
                        {
                            Id = 6,
                            HasGender = true,
                            HasPhoneType = false,
                            HasPosition = false,
                            Title = "Female"
                        },
                        new
                        {
                            Id = 7,
                            HasGender = false,
                            HasPhoneType = true,
                            HasPosition = false,
                            Title = "Home"
                        },
                        new
                        {
                            Id = 8,
                            HasGender = false,
                            HasPhoneType = true,
                            HasPosition = false,
                            Title = "Work"
                        },
                        new
                        {
                            Id = 9,
                            HasGender = false,
                            HasPhoneType = true,
                            HasPosition = false,
                            Title = "Mobile"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("PositionId");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(1996, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "test@tes.com",
                            Firstname = "Person1",
                            GenderId = 5,
                            Lastname = "PersonLastName1",
                            PositionId = 2
                        });
                });

            modelBuilder.Entity("DAL.Entities.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("PhoneTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("PhoneTypeId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("DAL.Entities.Person", b =>
                {
                    b.HasOne("DAL.Entities.Dictionary", "Gender")
                        .WithMany("PersonGenders")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Dictionary", "Position")
                        .WithMany("PersonPositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.PhoneNumber", b =>
                {
                    b.HasOne("DAL.Entities.Person", "Person")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Dictionary", "PhoneType")
                        .WithMany("PhoneTypes")
                        .HasForeignKey("PhoneTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
